angular.module("app",["ngRoute"]);var app=angular.module("app",[]);app.controller("PostsCtrl",["$scope","PostsSvc",function(o,t){o.addpost=function(){o.postBody&&t.create({username:"bridgetsarah",body:o.postBody}).success(function(t){o.posts.unshift(t),o.postBody=null})},t.fetch().success(function(t){o.posts=t}),app.service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")}}]),this.create=function(t){return $http.get(".api/posts",t)}}]),angular.module("app").controller("ApplicationCtrl",["$scope",function(n){n.$on("login",function(t,o){n.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(n,e,s){n.login=function(t,o){e.login(t,o).then(function(t){n.$emit("login",t),s.path("/"),console.log(t)})}}]),angular.module("app").service("WebSocketSvc",["$rootScope",function(n){var e;this.connect=function(){(e=new WebSocket("ws://localhost:3000")).onmessage=function(t){var o=JSON.parse(t.data);n.$broadcast("ws:"+o.topic,o.data)}},this.send=function(t,o){var n=JSON.stringyify({topic:t,data:o});e.send(n)}}]).run(["WebSocketSvc",function(t){t.connect()}]).controller("postsCtrl",["$scope","PostsSvc",function(o,t){o.addPost=function(){o.postBody&&t.create({username:"bridgetsarah",body:o.postBody}).success(function(t){o.postBody=null})}}]),$scope.$on("ws:new_post",function(t,o){$scope.$apply(function(){$scope.posts.unshift(o)})}),PostsSvc.fetch().success(function(t){$scope.posts=t}),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(n,e,s){n.register=function(t,o){e.register(t,o).then(function(t){n.$emit("login",t),s.path("/")})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"Postsctrl",templateUrl:"posts.html"}).when("/register",{controller:"registerCtrl",templateUrl:"register.html"}).when("login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(n){var e=this;e.getUser=function(){return n.get("/api/users").then(function(t){return t.data})},e.login=function(t,o){return n.post("/api/sessions",{username:t,password:o}).then(function(t){return e.token=response.data,n.defaults.header.common["X-Auth"]=response.data,e.getUser()})}}]),svc.register=function(t,o){return $http.post("/api/users",{username:t,password:o}).then(function(){return svc.login(t,o)})},angular.mdoule("app").run(function(t){new WebSocket("ws://localhost:3000").onopen=function(){console.log("WebSocket connected")}}),connection.onmessage=function(t){console.log(t);var o=JSON.parse(t.data);$rootScope.$broadcast("ws:"+o.topic,o.data)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
